#define _CRT_SECURE_NO_WARNINGS 1
#include"game.h"
#include<stdio.h>
#include<stdlib.h>

//初始化棋盘
void CleanBoard(char board[ROW][COL], int row, int col)
{
	int i, j;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}

}

//输出棋盘
void printBoard(char board[ROW][COL], int row, int col)
{
	int i;
	for (i = 0; i < row; i++)
	{
		int j;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		putchar('\n');
		if (i < row - 1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
		}
		putchar('\n');
	}
}

//玩家移动
void PlayerMove(char board[ROW][COL], int row, int col)
{
	int i;
	printf("玩家下棋:>\n");
	printf("请根据电脑小键盘的布局输入你要下的位置:>");
	do
	{
		i = 0;
		int input;
		scanf("%d", &input);
		fflush(stdin);
		switch (input)			/*将玩家输入的数字转化为棋盘位置*/
		{
		case 1:
			if (board[2][0] == ' ')
				board[2][0] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 2:
			if (board[2][1] == ' ')
				board[2][1] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 3:
			if (board[2][2] == ' ')
				board[2][2] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 4:
			if (board[1][0] == ' ')
				board[1][0] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 5:
			if (board[1][1] == ' ')
				board[1][1] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 6:
			if (board[1][2] == ' ')
				board[1][2] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 7:
			if (board[0][0] == ' ')
				board[0][0] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;;
			}
			break;
		case 8:
			if (board[0][1] == ' ')
				board[0][1] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		case 9:
			if (board[0][2] == ' ')
				board[0][2] = '@';
			else
			{
				printf("位置已被占用，请重新输入:>");
				i = 1;
			}
			break;
		default:
			printf("请输入1-9的数字:>");
			i = 1;
		}
	} while (i);
}

//电脑移动，无AI电脑
void ComputerMove(char board[ROW][COL], int row, int col)
{
	printf("电脑下棋:>\n");
	for (;;)
	{
		int x = rand() % 3;
		int y = rand() % 3;
		if (board[x][y] == ' ')
		{
			board[x][y] = '*';
			break;
		}
	}
}

//判断输赢
char Judge(char board[ROW][COL], int row, int col)
{
	int i;
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')//横三排
			return board[i][1];
		else if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')//竖三排
			return board[1][i];
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')//正斜三排
		return board[1][1];
	else if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')//反斜三排
		return board[1][1];
	else			/*没有输赢，判断是否为平局*/
	{
		for (int x = 0; x < row; x++)
		{
			for (int y = 0; y < col; y++)
			{
				if (board[x][y] == ' ')
					return 'G';
			}
		}
		return 'X';
	}
}